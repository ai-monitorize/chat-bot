Name
Description
Alias
Continue watching
a mechanism for personalised tracking of watching progress and watched state for VoD entities
CTW
Continue watching service
a standalone micro service dedicated for realisation of continue watching logic
CWS
Watching progress
a CTW progress in milliseconds
progressInMs
Watched state
a CTW watched state. Indicates if the CTW was fully watched
isWatched
Continue watching minimal offset
a time in milliseconds which is used to determine if the CTW watching progress is considered as too small. If too small, the CTW is considered as unmeaningful. Used in situations when user started watching the VoD but exited too soon
ctwMinOffset
Continue watching maximum offset
a time in milliseconds which is used to determine if the CTW watching progress is considered as completely watched. Used in situations when a user watched a VoD near the end (end credits)
ctwMaxOffset
Continue watching personalisation is done on user’s profile level.
Requirements
As a user, I want to have a continue watching list available for VoDs which are not pin-protected and which are in my allowance.
As a user, I want the system to remember the last watched position of a VoD so that I can resume watching from where I left off last time without manually searching for the point.
As a user, if I stop watching a VoD after viewing it for a short duration (few seconds), I do not want it to be listed in my continue watching list.
As a user, I want the flexibility to manually mark a VoD as watched or unwatched while retaining the watch progress information for future reference. If I mark the whole series as watched, I want it propagated on all its episodes.
As a user, I want the VoD to be automatically marked as watched once I’ve viewed it entirely.
As a user, in my continue watching list, I only want to see the latest episode VoD of a series that I started watching, not all partially watched episodes.
As a user, upon completing an episode VoD in a series, I want an immediate option to view the next episode. If the episode airs in the future, I want to have it listed the moment it is available.
Implementation details
CWS meets the feature requirements using the subsequent approaches.
Requirement:
 As a user, I want to have a continue watching list available for VoDs which are not pin-protected and which are in my allowance
Implementation Method: CWS doesn’t have any information about the VoDs in our system, and any information related to them. Given the facts in
CWS API | Description, other services which call CWS APIs are responsible for providing VoDs which exist in our system, which are not pin-protected, and which are in allowance. This way, CWS will never store CTWs for VoDs which are non-existing, pin-protected or not in allowance.
Requirement: As a user, I want the system to remember the last watched position of a VoD so that I can resume watching from where I left off last time without manually searching for the point.
Implementation Method: CWS captures and stores the current watching progress data for a particular VoD and profile. When the continue watching list is requested again, CWS will present the VoD along with the previously recorded progress point.
Requirement: As a user, if I stop watching a VoD after viewing it for a short duration (few seconds), I do not want it to be listed in my continue watching list.
Implementation Method: CWS utilizes a parameter named minCtwOffset. This parameter instructs CWS on the minimum amount of a VoD a user must watch for it to be eligible for inclusion in the continue watching list. If the user's watch progress is below this offset, the VoD is deemed insignificant for continue watching purposes and is therefore not included in the list.
Requirement: As a user, I want the flexibility to manually mark a VoD as watched or unwatched while retaining the watch progress information for future reference. If I mark the whole series as watched, I want it propagated on all its episodes.
Implementation Method: CWS registers the user's input regarding the watched status of a VoD and updates the status in the datastore accordingly without altering the existing watching progress. To efficiently manage datastore space, if a VoD is marked as unwatched and possesses no recorded watching progress, it will be assumed to be in the initial watching progress state, leading to its removal from the both the caching and persistence layer for optimization purposes. This approach ensures that only relevant data is stored. If the VoD is of type series, alter the watched status of the series and all its episodes accordingly. If the new watched status has been marked as not watched, all episodes which didn’t have any watching progress will be assumed to be in the initial continue watching state, leading to its removal from the datastore.
Requirement: As a user, I want the VoD to be automatically marked as watched once I’ve viewed it entirely.
Implementation Method: CWS evaluates whether a VoD has been fully watched by comparing the user's watching progress with the total duration of the VoD and a predefined offset value, ctwMaxOffset. If the watching progress is equal to or exceeds the VoD's duration, the system marks the VoD as watched. Similarly, if the watching progress is equal to or exceeds the VoD's duration minus the ctwMaxOffset, it is inferred that the user has watched the VoD up to the end credits and then stopped. In this case, the system will also flag the VoD as watched.
Requirement: As a user, in my continue watching list, I only want to see the latest episode VoD of a series that I started watching, not all partially watched episodes.
Implementation Method: TODO
Requirement: As a user, upon completing an episode VoD in a series, I want an immediate option to view the next episode. If the episode airs in the future, I want to have it listed the moment it is available.
Implementation Method: TODO